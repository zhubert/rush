# Standard library string module
# Provides common string manipulation functions

# Native functions substr and split are automatically injected by the interpreter

# Helper function to check if a character is whitespace
export is_whitespace_char = fn(char) {
  return (char == " ") || (char == "\t") || (char == "\n") || (char == "\r")
}

export trim = fn(s) {
  # Simple approach: implement trim as rtrim(ltrim(s))
  return rtrim(ltrim(s))
}

export ltrim = fn(s) {
  if (len(s) == 0) {
    return s
  }
  
  # Find first non-whitespace position
  start = 0
  while (start < len(s) && is_whitespace_char(substr(s, start, 1))) {
    start = start + 1
  }
  
  # If entire string is whitespace
  if (start >= len(s)) {
    return ""
  }
  
  return substr(s, start, len(s) - start)
}

export rtrim = fn(s) {
  if (len(s) == 0) {
    return s
  }
  
  # Find last non-whitespace position
  end = len(s) - 1
  while (end >= 0 && is_whitespace_char(substr(s, end, 1))) {
    end = end - 1
  }
  
  # If entire string is whitespace
  if (end < 0) {
    return ""
  }
  
  # Return string up to and including the last non-whitespace character
  return substr(s, 0, end + 1)
}

# Helper function to convert a single character to uppercase
char_to_upper = fn(char) {
  if (char >= "a" && char <= "z") {
    # Convert lowercase to uppercase using ASCII arithmetic
    return chr(ord(char) - 32)
  }
  return char
}

# Helper function to convert a single character to lowercase  
char_to_lower = fn(char) {
  if (char >= "A" && char <= "Z") {
    # Convert uppercase to lowercase using ASCII arithmetic
    return chr(ord(char) + 32)
  }
  return char
}

export upper = fn(s) {
  if (len(s) == 0) {
    return s
  }
  
  result = ""
  i = 0
  while (i < len(s)) {
    char = s[i]
    result = result + char_to_upper(char)
    i = i + 1
  }
  return result
}

export lower = fn(s) {
  if (len(s) == 0) {
    return s
  }
  
  result = ""
  i = 0
  while (i < len(s)) {
    char = s[i]
    result = result + char_to_lower(char)
    i = i + 1
  }
  return result
}

export length = fn(s) {
  # Use built-in len function
  return len(s)
}

export contains = fn(s, search) {
  if (len(search) == 0) {
    return true
  }
  
  if (len(s) < len(search)) {
    return false
  }
  
  # Search for the substring at each position
  i = 0
  while (i <= len(s) - len(search)) {
    # Check if substring matches at position i
    match = true
    j = 0
    while (j < len(search) && match) {
      if (s[i + j] != search[j]) {
        match = false
      }
      j = j + 1
    }
    
    if (match) {
      return true
    }
    
    i = i + 1
  }
  
  return false
}

export replace = fn(s, old, new) {
  if (len(old) == 0) {
    return s
  }
  
  if (len(s) == 0) {
    return s
  }
  
  result = ""
  i = 0
  
  while (i < len(s)) {
    # Check if we found the old substring at position i
    if (i <= len(s) - len(old)) {
      match = true
      j = 0
      while (j < len(old) && match) {
        if (substr(s, i + j, 1) != substr(old, j, 1)) {
          match = false
        }
        j = j + 1
      }
      
      if (match) {
        # Replace with new substring
        result = result + new
        i = i + len(old)
      } else {
        # No match, copy single character
        result = result + substr(s, i, 1)
        i = i + 1
      }
    } else {
      # Not enough characters left to match, copy single character
      result = result + substr(s, i, 1)
      i = i + 1
    }
  }
  
  return result
}

export starts_with = fn(s, prefix) {
  if (len(prefix) == 0) {
    return true
  }
  
  if (len(s) < len(prefix)) {
    return false
  }
  
  # Check if the beginning of s matches prefix
  i = 0
  while (i < len(prefix)) {
    if (s[i] != prefix[i]) {
      return false
    }
    i = i + 1
  }
  
  return true
}

export ends_with = fn(s, suffix) {
  if (len(suffix) == 0) {
    return true
  }
  
  if (len(s) < len(suffix)) {
    return false
  }
  
  # Check if the end of s matches suffix
  start_pos = len(s) - len(suffix)
  i = 0
  while (i < len(suffix)) {
    if (s[start_pos + i] != suffix[i]) {
      return false
    }
    i = i + 1
  }
  
  return true
}

export join = fn(arr, separator) {
  if (len(arr) == 0) {
    return ""
  }
  
  if (len(arr) == 1) {
    return arr[0]
  }
  
  result = arr[0]
  i = 1
  while (i < len(arr)) {
    result = result + separator + arr[i]
    i = i + 1
  }
  
  return result
}

export to_string = fn(value) {
  # Convert various types to string representation
  if (type(value) == "STRING") {
    return value
  }
  
  if (type(value) == "INTEGER") {
    # Basic integer to string conversion
    if (value == 0) { return "0" }
    if (value == 1) { return "1" }
    if (value == 2) { return "2" }
    if (value == 3) { return "3" }
    if (value == 4) { return "4" }
    if (value == 5) { return "5" }
    if (value == 6) { return "6" }
    if (value == 7) { return "7" }
    if (value == 8) { return "8" }
    if (value == 9) { return "9" }
    if (value == 10) { return "10" }
    # This is a simplified version - full implementation would need more logic
    return "number"
  }
  
  if (type(value) == "BOOLEAN") {
    if (value) {
      return "true"
    } else {
      return "false"
    }
  }
  
  return "unknown"
}