# Standard library collections module
# Provides hash/dictionary operations and utilities

# Core hash operations
export hash_keys = builtin_hash_keys
export hash_values = builtin_hash_values
export hash_has_key = builtin_hash_has_key
export hash_get = builtin_hash_get
export hash_set = builtin_hash_set
export hash_delete = builtin_hash_delete
export hash_merge = builtin_hash_merge

# Convenience hash functions

export hash_length = fn(hash) {
  # Use built-in len function
  return len(hash)
}

export hash_empty? = fn(hash) {
  return len(hash) == 0
}

export hash_size = fn(hash) {
  # Alias for hash_length
  return len(hash)
}

export hash_contains_value? = fn(hash, value) {
  values = hash_values(hash)
  i = 0
  while (i < len(values)) {
    if (values[i] == value) {
      return true
    }
    i = i + 1
  }
  return false
}

export hash_invert = fn(hash) {
  # Create a new hash with keys and values swapped
  result = {}
  keys = hash_keys(hash)
  i = 0
  while (i < len(keys)) {
    key = keys[i]
    value = hash_get(hash, key)
    result[value] = key
    i = i + 1
  }
  return result
}

export hash_clear = fn(hash) {
  # Return a new empty hash
  return {}
}

export hash_to_array = fn(hash) {
  # Convert hash to array of [key, value] pairs
  result = []
  keys = hash_keys(hash)
  i = 0
  while (i < len(keys)) {
    key = keys[i]
    value = hash_get(hash, key)
    result = push(result, [key, value])
    i = i + 1
  }
  return result
}

export array_to_hash = fn(pairs) {
  # Convert array of [key, value] pairs to hash
  result = {}
  i = 0
  while (i < len(pairs)) {
    pair = pairs[i]
    if (len(pair) >= 2) {
      result[pair[0]] = pair[1]
    }
    i = i + 1
  }
  return result
}

export hash_filter = fn(hash, func) {
  # Filter hash by key-value pairs that satisfy the predicate
  result = {}
  keys = hash_keys(hash)
  i = 0
  while (i < len(keys)) {
    key = keys[i]
    value = hash_get(hash, key)
    if (func(key, value)) {
      result[key] = value
    }
    i = i + 1
  }
  return result
}

export hash_map_values = fn(hash, func) {
  # Transform all values in the hash using the function
  result = {}
  keys = hash_keys(hash)
  i = 0
  while (i < len(keys)) {
    key = keys[i]
    value = hash_get(hash, key)
    result[key] = func(value)
    i = i + 1
  }
  return result
}

export hash_select_keys = fn(hash, key_array) {
  # Create new hash with only the specified keys
  result = {}
  i = 0
  while (i < len(key_array)) {
    key = key_array[i]
    if (hash_has_key(hash, key)) {
      result[key] = hash_get(hash, key)
    }
    i = i + 1
  }
  return result
}

export hash_reject_keys = fn(hash, key_array) {
  # Create new hash without the specified keys
  result = {}
  keys = hash_keys(hash)
  i = 0
  while (i < len(keys)) {
    key = keys[i]
    # Check if key should be rejected
    should_reject = false
    j = 0
    while (j < len(key_array)) {
      if (key == key_array[j]) {
        should_reject = true
        j = len(key_array)  # Break out of inner loop
      }
      j = j + 1
    }
    
    if (!should_reject) {
      result[key] = hash_get(hash, key)
    }
    i = i + 1
  }
  return result
}

export hash_each = fn(hash, callback) {
  # Iterate over hash with callback function
  keys = hash_keys(hash)
  i = 0
  while (i < len(keys)) {
    key = keys[i]
    value = hash_get(hash, key)
    callback(key, value)
    i = i + 1
  }
  return null
}