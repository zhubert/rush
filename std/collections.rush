# Standard library collections module
# Provides hash/dictionary operations and utilities

# Core hash operations
export keys = builtin_hash_keys
export values = builtin_hash_values
export has_key = builtin_hash_has_key
export get = builtin_hash_get
export set = builtin_hash_set
export delete = builtin_hash_delete
export merge = builtin_hash_merge

# Convenience hash functions

export length = fn(hash) {
  # Use built-in len function
  return len(hash)
}

export empty? = fn(hash) {
  return len(hash) == 0
}

export size = fn(hash) {
  # Alias for length
  return len(hash)
}

export contains_value? = fn(hash, value) {
  hash_values = values(hash)
  i = 0
  while (i < len(hash_values)) {
    if (hash_values[i] == value) {
      return true
    }
    i = i + 1
  }
  return false
}

export invert = fn(hash) {
  # Create a new hash with keys and values swapped
  result = {}
  hash_keys = keys(hash)
  i = 0
  while (i < len(hash_keys)) {
    key = hash_keys[i]
    value = get(hash, key)
    result[value] = key
    i = i + 1
  }
  return result
}

export clear = fn(hash) {
  # Return a new empty hash
  return {}
}

export to_array = fn(hash) {
  # Convert hash to array of [key, value] pairs
  result = []
  hash_keys = keys(hash)
  i = 0
  while (i < len(hash_keys)) {
    key = hash_keys[i]
    value = get(hash, key)
    result = push(result, [key, value])
    i = i + 1
  }
  return result
}

export array_to_hash = fn(pairs) {
  # Convert array of [key, value] pairs to hash
  result = {}
  i = 0
  while (i < len(pairs)) {
    pair = pairs[i]
    if (len(pair) >= 2) {
      result[pair[0]] = pair[1]
    }
    i = i + 1
  }
  return result
}

export filter = fn(hash, func) {
  # Filter hash by key-value pairs that satisfy the predicate
  result = {}
  hash_keys = keys(hash)
  i = 0
  while (i < len(hash_keys)) {
    key = hash_keys[i]
    value = get(hash, key)
    if (func(key, value)) {
      result[key] = value
    }
    i = i + 1
  }
  return result
}

export map_values = fn(hash, func) {
  # Transform all values in the hash using the function
  result = {}
  hash_keys = keys(hash)
  i = 0
  while (i < len(hash_keys)) {
    key = hash_keys[i]
    value = get(hash, key)
    result[key] = func(value)
    i = i + 1
  }
  return result
}

export select_keys = fn(hash, key_array) {
  # Create new hash with only the specified keys
  result = {}
  i = 0
  while (i < len(key_array)) {
    key = key_array[i]
    if (has_key(hash, key)) {
      result[key] = get(hash, key)
    }
    i = i + 1
  }
  return result
}

export reject_keys = fn(hash, key_array) {
  # Create new hash without the specified keys
  result = {}
  hash_keys = keys(hash)
  i = 0
  while (i < len(hash_keys)) {
    key = hash_keys[i]
    # Check if key should be rejected
    should_reject = false
    j = 0
    while (j < len(key_array)) {
      if (key == key_array[j]) {
        should_reject = true
        j = len(key_array)  # Break out of inner loop
      }
      j = j + 1
    }
    
    if (!should_reject) {
      result[key] = get(hash, key)
    }
    i = i + 1
  }
  return result
}

export each = fn(hash, callback) {
  # Iterate over hash with callback function
  hash_keys = keys(hash)
  i = 0
  while (i < len(hash_keys)) {
    key = hash_keys[i]
    value = get(hash, key)
    callback(key, value)
    i = i + 1
  }
}