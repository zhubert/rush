// AOT Compilation Demo - Rush Programming Language
// This program demonstrates various language features suitable for AOT compilation

print("=== Rush AOT Compilation Demo ===");
print("");

// Basic arithmetic and variables
let x = 10;
let y = 20;
let sum = x + y;
print("Basic arithmetic: " + str(x) + " + " + str(y) + " = " + str(sum));

// Function definition and calls
let factorial = fn(n) {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);
};

let fact_5 = factorial(5);
print("Factorial of 5: " + str(fact_5));

// Array operations
let numbers = [1, 2, 3, 4, 5];
let doubled = [];

// Array processing with built-in methods
let i = 0;
while (i < len(numbers)) {
    doubled = push(doubled, numbers[i] * 2);
    i = i + 1;
}

print("Original array: " + str(numbers));
print("Doubled array: " + str(doubled));

// Hash/dictionary operations
let person = {
    "name": "Alice",
    "age": 30,
    "city": "San Francisco"
};

print("Person info:");
print("  Name: " + person["name"]);
print("  Age: " + str(person["age"]));
print("  City: " + person["city"]);

// String operations
let message = "Hello, AOT World!";
let upper_message = message.upper();
let message_length = len(message);

print("String operations:");
print("  Original: " + message);
print("  Uppercase: " + upper_message);
print("  Length: " + str(message_length));

// Control flow with loops
print("Counting down:");
let countdown = 5;
while (countdown > 0) {
    print("  " + str(countdown) + "...");
    countdown = countdown - 1;
}
print("  Blast off! ðŸš€");

// Fibonacci sequence (good for optimization testing)
let fibonacci = fn(n) {
    if (n <= 1) {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
};

print("Fibonacci sequence (first 10 numbers):");
let fib_i = 0;
while (fib_i < 10) {
    let fib_num = fibonacci(fib_i);
    print("  fib(" + str(fib_i) + ") = " + str(fib_num));
    fib_i = fib_i + 1;
}

// Conditional logic
let check_even = fn(num) {
    if (num % 2 == 0) {
        return "even";
    } else {
        return "odd";
    }
};

print("Number type checking:");
let test_numbers = [1, 2, 3, 4, 5, 6];
let j = 0;
while (j < len(test_numbers)) {
    let num = test_numbers[j];
    let type = check_even(num);
    print("  " + str(num) + " is " + type);
    j = j + 1;
}

// Nested function calls and complex expressions
let compute = fn(a, b, c) {
    return (a + b) * c - (a - b) / 2;
};

let result = compute(10, 5, 3);
print("Complex computation: " + str(result));

// Performance test - calculate sum of squares
let sum_of_squares = fn(n) {
    let sum = 0;
    let k = 1;
    while (k <= n) {
        sum = sum + (k * k);
        k = k + 1;
    }
    return sum;
};

let squares_sum = sum_of_squares(100);
print("Sum of squares 1-100: " + str(squares_sum));

print("");
print("=== AOT Demo Complete ===");
print("This program demonstrates:");
print("- Function definitions and recursion");
print("- Array and hash operations");
print("- String manipulation");
print("- Control flow (if/else, while loops)");
print("- Mathematical operations");
print("- Complex expressions and nested calls");
print("");
print("Compile with: rush -aot -O2 examples/aot_demo.rush");
print("Run with: ./examples/aot_demo");