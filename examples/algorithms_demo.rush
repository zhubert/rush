# Rush Language - Algorithms and Data Structures Demo
# Classic algorithms implemented in Rush

print("=== Algorithms Demo ===")

# 1. SORTING ALGORITHMS
print("\n1. Bubble Sort:")
bubble_sort = fn(arr) {
  n = len(arr)
  # Create a copy to avoid modifying original
  result = []
  for (i = 0; i < n; i = i + 1) {
    result = push(result, arr[i])
  }
  
  for (i = 0; i < n - 1; i = i + 1) {
    for (j = 0; j < n - i - 1; j = j + 1) {
      if (result[j] > result[j + 1]) {
        # Swap elements
        temp = result[j]
        result[j] = result[j + 1]
        result[j + 1] = temp
      }
    }
  }
  return result
}

unsorted = [64, 34, 25, 12, 22, 11, 90]
print("Original: [64, 34, 25, 12, 22, 11, 90]")
sorted_array = bubble_sort(unsorted)
print("Sorted length: " + type(len(sorted_array)))

# 2. SEARCH ALGORITHMS
print("\n2. Linear Search:")
linear_search = fn(arr, target) {
  for (i = 0; i < len(arr); i = i + 1) {
    if (arr[i] == target) {
      return i
    }
  }
  return -1  # Not found
}

numbers = [5, 2, 8, 1, 9, 3]
target = 8
index = linear_search(numbers, target)
print("Searching for " + type(target) + " in [5, 2, 8, 1, 9, 3]")
print("Found at index: " + type(index))

print("\n3. Binary Search (on sorted array):")
binary_search = fn(arr, target) {
  left = 0
  right = len(arr) - 1
  
  while (left <= right) {
    mid = (left + right) / 2
    mid = mid - (mid % 1)  # Floor division simulation
    
    if (arr[mid] == target) {
      return mid
    } else {
      if (arr[mid] < target) {
        left = mid + 1
      } else {
        right = mid - 1
      }
    }
  }
  return -1
}

sorted_nums = [1, 3, 5, 7, 9, 11, 13, 15]
target2 = 7
index2 = binary_search(sorted_nums, target2)
print("Searching for " + type(target2) + " in sorted array")
print("Found at index: " + type(index2))

# 3. MATHEMATICAL ALGORITHMS
print("\n4. Greatest Common Divisor (Euclidean Algorithm):")
gcd = fn(a, b) {
  while (b != 0) {
    temp = b
    b = a % b
    a = temp
  }
  return a
}

num1 = 48
num2 = 18
result_gcd = gcd(num1, num2)
print("GCD of " + type(num1) + " and " + type(num2) + " = " + type(result_gcd))

print("\n5. Prime Number Check:")
is_prime = fn(n) {
  if (n <= 1) {
    return false
  }
  if (n <= 3) {
    return true
  }
  if (n % 2 == 0 || n % 3 == 0) {
    return false
  }
  
  i = 5
  while (i * i <= n) {
    if (n % i == 0 || n % (i + 2) == 0) {
      return false
    }
    i = i + 6
  }
  return true
}

test_numbers = [2, 17, 25, 29, 35, 41]
print("Prime check for numbers:")
for (i = 0; i < len(test_numbers); i = i + 1) {
  num = test_numbers[i]
  prime = is_prime(num)
  print("  " + type(num) + " is prime: " + type(prime))
}

# 4. SEQUENCE GENERATORS
print("\n6. Fibonacci Sequence Generator:")
fibonacci_sequence = fn(n) {
  if (n <= 0) {
    return []
  }
  if (n == 1) {
    return [0]
  }
  
  fib = [0, 1]
  for (i = 2; i < n; i = i + 1) {
    next = fib[i - 1] + fib[i - 2]
    fib = push(fib, next)
  }
  return fib
}

fib_10 = fibonacci_sequence(10)
print("First 10 Fibonacci numbers: length = " + type(len(fib_10)))

print("\n7. Pascal's Triangle (first few rows):")
pascal_triangle = fn(rows) {
  triangle = []
  
  for (i = 0; i < rows; i = i + 1) {
    row = []
    for (j = 0; j <= i; j = j + 1) {
      if (j == 0 || j == i) {
        row = push(row, 1)
      } else {
        prev_row = triangle[i - 1]
        value = prev_row[j - 1] + prev_row[j]
        row = push(row, value)
      }
    }
    triangle = push(triangle, row)
  }
  return triangle
}

pascal_5 = pascal_triangle(5)
print("Pascal's triangle (5 rows):")
for (i = 0; i < len(pascal_5); i = i + 1) {
  row = pascal_5[i]
  print("  Row " + type(i) + " length: " + type(len(row)))
}

# 5. STRING ALGORITHMS
print("\n8. String Reversal:")
reverse_string = fn(str) {
  reversed = ""
  for (i = len(str) - 1; i >= 0; i = i - 1) {
    reversed = reversed + str[i]
  }
  return reversed
}

original = "Rush Language"
reversed = reverse_string(original)
print("Original: " + original)
print("Reversed: " + reversed)

print("\n9. Palindrome Check:")
is_palindrome = fn(str) {
  n = len(str)
  for (i = 0; i < n / 2; i = i + 1) {
    if (str[i] != str[n - 1 - i]) {
      return false
    }
  }
  return true
}

test_words = ["radar", "hello", "level", "world", "madam"]
print("Palindrome checks:")
for (i = 0; i < len(test_words); i = i + 1) {
  word = test_words[i]
  is_pal = is_palindrome(word)
  print("  '" + word + "' is palindrome: " + type(is_pal))
}

# 6. ARRAY ALGORITHMS
print("\n10. Array Statistics:")
calculate_stats = fn(arr) {
  if (len(arr) == 0) {
    return [0, 0, 0]  # [min, max, avg]
  }
  
  min_val = arr[0]
  max_val = arr[0]
  sum = 0
  
  for (i = 0; i < len(arr); i = i + 1) {
    val = arr[i]
    sum = sum + val
    if (val < min_val) {
      min_val = val
    }
    if (val > max_val) {
      max_val = val
    }
  }
  
  avg = sum / len(arr)
  return [min_val, max_val, avg]
}

data = [23, 45, 12, 67, 34, 89, 15, 56]
stats = calculate_stats(data)
print("Array: [23, 45, 12, 67, 34, 89, 15, 56]")
print("Min: " + type(stats[0]))
print("Max: " + type(stats[1]))
print("Average: " + type(stats[2]))

print("\n11. Array Rotation:")
rotate_left = fn(arr, k) {
  n = len(arr)
  if (n == 0 || k == 0) {
    return arr
  }
  
  k = k % n  # Handle k > n
  result = []
  
  # Add elements from position k to end
  for (i = k; i < n; i = i + 1) {
    result = push(result, arr[i])
  }
  
  # Add elements from start to position k
  for (i = 0; i < k; i = i + 1) {
    result = push(result, arr[i])
  }
  
  return result
}

original_arr = [1, 2, 3, 4, 5, 6, 7]
rotated = rotate_left(original_arr, 3)
print("Original: [1, 2, 3, 4, 5, 6, 7]")
print("Rotated left by 3: length = " + type(len(rotated)))

# 7. RECURSIVE ALGORITHMS
print("\n12. Tower of Hanoi (step counting):")
hanoi_steps = fn(n) {
  if (n == 1) {
    return 1
  }
  return 2 * hanoi_steps(n - 1) + 1
}

disks = 4
steps = hanoi_steps(disks)
print("Tower of Hanoi with " + type(disks) + " disks requires " + type(steps) + " steps")

print("\n13. Binary Tree Depth (simulated with arrays):")
# Represent binary tree as array: [root, left_child, right_child, ...]
tree_depth = fn(tree, index) {
  if (index >= len(tree) || tree[index] == 0) {  # 0 represents null
    return 0
  }
  
  left_depth = tree_depth(tree, 2 * index + 1)
  right_depth = tree_depth(tree, 2 * index + 2)
  
  max_depth = if (left_depth > right_depth) { left_depth } else { right_depth }
  return 1 + max_depth
}

# Tree: [1, 2, 3, 4, 5, 0, 6] represents:
#       1
#      / \
#     2   3
#    / \   \
#   4   5   6
binary_tree = [1, 2, 3, 4, 5, 0, 6]
depth = tree_depth(binary_tree, 0)
print("Binary tree depth: " + type(depth))

print("\n=== Algorithms Demo Complete! ===")
print("Demonstrated algorithms:")
print("✓ Sorting: Bubble Sort")
print("✓ Searching: Linear Search, Binary Search")
print("✓ Mathematical: GCD, Prime Check")
print("✓ Sequences: Fibonacci, Pascal's Triangle")
print("✓ String: Reversal, Palindrome Check")
print("✓ Array: Statistics, Rotation")
print("✓ Recursive: Tower of Hanoi, Tree Depth")