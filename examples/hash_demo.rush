# Rush Language - Hash/Dictionary Collections Demo
# This program demonstrates hash/dictionary operations using the collections module

import { keys, values, has_key, get, set, delete, merge, length, empty?, contains_value?, filter, each } from "std/collections"

print("=== Rush Hash/Dictionary Collections Demo ===")

# 1. HASH CREATION AND BASIC OPERATIONS
print("\n1. Hash Creation and Basic Operations:")

# Hash creation and basic operations
person = {"name": "Alice", "age": 30, "active": true}
print("Person hash: " + type(person))
print("Name: " + person["name"])
print("Age: " + type(person["age"]))

# Hash assignment and modification
person["city"] = "New York"
person["age"] = 31
print("Updated person: " + type(person))

# 2. HASH WITH DIFFERENT KEY TYPES
print("\n2. Mixed Key Types:")
config = {"debug": true, 42: "answer", 3.14: "pi", true: "enabled"}
print("Mixed key types: " + type(config["debug"]) + ", " + config[42] + ", " + config[3.14])

# 3. COLLECTIONS MODULE FUNCTIONS
print("\n3. Collections Module Functions:")

# Using collections module functions
person_keys = keys(person)
person_values = values(person)
print("Keys count: " + type(length(person)))
print("Has 'name' key: " + type(has_key(person, "name")))
print("Has 'phone' key: " + type(has_key(person, "phone")))

# Hash manipulation functions
original = {"name": "Bob", "score": 85}
updated = set(original, "grade", "B")
without_score = delete(updated, "score")
print("Final hash length: " + type(length(without_score)))

# 4. HASH MERGING
print("\n4. Hash Merging:")
defaults = {"theme": "dark", "notifications": true}
user_prefs = {"theme": "light", "language": "en"}
merged = merge(defaults, user_prefs)
print("Merged config theme: " + merged["theme"])

# 5. ADVANCED HASH OPERATIONS
print("\n5. Advanced Hash Operations:")

# Check if hash is empty
empty_hash = {}
print("Empty hash check: " + type(empty?(empty_hash)))
print("Person hash empty: " + type(empty?(person)))

# Check if hash contains a specific value
print("Contains value 'Alice': " + type(contains_value?(person, "Alice")))
print("Contains value 'Bob': " + type(contains_value?(person, "Bob")))

# Filter hash based on condition
numbers_hash = {"one": 1, "two": 2, "three": 3, "four": 4}
even_filter = fn(key, value) {
  # Check if value is even
  half = value / 2
  doubled = half * 2
  return doubled == value
}
evens = filter(numbers_hash, even_filter)
print("Filtered even numbers: " + type(length(evens)))

# 6. NESTED HASHES
print("\n6. Nested Hashes:")
users = {
  "alice": {"role": "admin", "permissions": ["read", "write", "delete"]},
  "bob": {"role": "user", "permissions": ["read"]}
}
alice_role = users["alice"]["role"]
alice_perms = users["alice"]["permissions"]
print("Alice is " + alice_role + " with " + type(len(alice_perms)) + " permissions")

# 7. ITERATING OVER HASHES
print("\n7. Hash Iteration:")
sample_hash = {"a": 1, "b": 2, "c": 3}

# Using each function to iterate
print("Hash contents:")
each(sample_hash, fn(key, value) {
  print("  " + key + ": " + type(value))
})

# Manual iteration using keys
print("Manual iteration:")
sample_keys = keys(sample_hash)
for (i = 0; i < length(sample_hash); i = i + 1) {
  key = sample_keys[i]
  value = get(sample_hash, key)
  print("  Key: " + key + ", Value: " + type(value))
}

# 8. PRACTICAL EXAMPLE - USER MANAGEMENT
print("\n8. Practical Example - User Management:")

# User database simulation
user_db = {}

# Add users
user_db = set(user_db, "user1", {"name": "John", "email": "john@example.com", "active": true})
user_db = set(user_db, "user2", {"name": "Jane", "email": "jane@example.com", "active": false})
user_db = set(user_db, "user3", {"name": "Bob", "email": "bob@example.com", "active": true})

print("Total users: " + type(length(user_db)))

# Find active users
active_users = filter(user_db, fn(user_id, user_info) {
  return user_info["active"]
})
print("Active users: " + type(length(active_users)))

# Get user info with default
user_info = get(user_db, "user1", {"name": "Unknown"})
print("User1 name: " + user_info["name"])

unknown_user = get(user_db, "user999", {"name": "Not Found"})
print("Unknown user name: " + unknown_user["name"])

print("\n=== Hash Demo Complete! ===")
print("Rush hash/dictionary collections support:")
print("✓ Hash creation with mixed key types")
print("✓ Built-in hash operations (keys, values, has_key, get, set, delete, merge)")
print("✓ Advanced operations (filter, each, contains_value?, empty?)")
print("✓ Nested hash structures")
print("✓ Practical user management examples")